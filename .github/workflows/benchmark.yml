name: "benchmark aoc"
on:
  push:
    branches:
      - main

concurrency: pr-${{ github.event.issue.number }}

env:
  GOVERSION: 1.21.4
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

permissions:
  contents: write
  pull-requests: read
  issues: read

jobs:
  bootstrap:
    runs-on: ubuntu-22.04
    outputs:
      benchmark: ${{ steps.benchmark.outputs.BENCHMARK_RESULTS }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GOVERSION }}
          cache: true
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg
          key: ${{ runner.os }}-go-build-${{ env.GOVERSION }}-${{ hashFiles('**/go.sum') }}-
      - name: Add token to .env
        run: echo "SESSION_TOKEN=${{ secrets.SESSION_TOKEN }}" > .env
      - name: Run aoc cli and save stdout
        id: benchmark
        run: |
          {
            echo 'BENCHMARK_RESULTS<<EOF'
            go run ./cli/main.go benchmark
            echo EOF
          } >> "$GITHUB_OUTPUT"

  table-to-readme:
    needs: [bootstrap]
    runs-on: ubuntu-22.04
    env:
      BENCHMARK_RESULTS: ${{ needs.bootstrap.outputs.benchmark }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install @octokit/rest

      - uses: actions/github-script@v6
        with:
          debug: true
          script: |
            const fs = require('fs');

            const octokit = new Octokit({
              auth: process.env.GITHUB_TOKEN,
              request: { fetch },
            });

            const sectionHeading = '## Benchmark\n';

            let readmeContent = fs.readFileSync('README.md', 'utf-8');

            const newContent = process.env.BENCHMARK_RESULTS

            console.log(newContent)

            if (!newContent) {
              console.log('No new content to update. Exiting the program.');
              process.exit(0);
            }


            if (readmeContent.includes(sectionHeading)) {
              const regex = new RegExp(`(${sectionHeading}[\\s\\S]*?)(?:\n\n|$)`);
              readmeContent = readmeContent.replace(regex, `${sectionHeading}\n${newContent}\n\n`);
            } else {
              readmeContent += `\n\n${sectionHeading}\n${newContent}\n`;
            }

            const readmeResponse = await octokit.repos.getReadme({
              owner: 'MattiasMTS',
              repo: 'advent2023',
            });

            await octokit.repos.createOrUpdateFileContents({
              owner: 'MattiasMTS',
              repo: 'advent2023',
              path: 'README.md',
              message: 'chore: update table ðŸŒŸ',
              content: Buffer.from(readmeContent).toString('base64'),
              sha: readmeResponse.data.sha
            });
            console.log('Successfully updated README.md');
